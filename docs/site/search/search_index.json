{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chrono Golf JS","text":"<p>A monorepo containing Node.js tools and libraries for interacting with the Lightspeed Golf Partner V2 API (also known as Chrono Golf API). This repository hosts two main packages designed to streamline golf course management and tournament booking processes.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project creation has been assisted by AI</p>"},{"location":"#overview","title":"Overview","text":"<p><code>chrono-golf-js</code> is structured as a pnpm monorepo, providing a cohesive environment for multiple related packages:</p> <ul> <li>chrono-golf-api: A comprehensive Node.js client for the Lightspeed Golf Partner V2 API, offering functionality to manage courses, tee times, bookings, and player information.</li> <li>tee-snatcher: A specialized tool built on top of <code>chrono-golf-api</code> to automatically monitor and book tee times for golf tournaments based on user-defined criteria.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To set up the monorepo and its packages, you'll need pnpm. If you don't have pnpm installed, you can install it via npm:</p> <pre><code>npm install -g pnpm\n</code></pre> <p>Then, clone this repository and install dependencies:</p> <pre><code>git clone &lt;repository-url&gt;\ncd chrono-golf-js\npnpm install\n</code></pre>"},{"location":"#packages","title":"Packages","text":""},{"location":"#chrono-golf-api","title":"chrono-golf-api","text":"<p>A robust API client for interacting with the Chrono Golf API. It handles authentication and provides methods for:</p> <ul> <li>Listing and retrieving details about golf courses</li> <li>Searching and booking tee times</li> <li>Managing player information and bookings</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>Configure your API credentials in <code>chrono-golf-api/.env</code>:</p> <pre><code>LIGHTSPEED_API_URL=https://api.chronogolf.com/v2\nLIGHTSPEED_CLIENT_ID=your_client_id\nLIGHTSPEED_CLIENT_SECRET=your_client_secret\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>const chronoGolf = require('chrono-golf-api');\n\n// Example: Get a list of courses\nasync function getCourses() {\n  try {\n    const coursesResponse = await chronoGolf.getCourses({ page: 1, per_page: 10 });\n    console.log(coursesResponse.courses);\n  } catch (error) {\n    console.error('Error fetching courses:', error.message);\n  }\n}\n\ngetCourses();\n</code></pre> <p>For detailed usage instructions and API documentation, refer to the chrono-golf-api README.</p>"},{"location":"#tee-snatcher","title":"tee-snatcher","text":"<p>A utility for automating the booking of golf tournaments by monitoring available tee times and booking them when criteria are met. It leverages <code>chrono-golf-api</code> for API interactions.</p>"},{"location":"#setup_1","title":"Setup","text":"<ol> <li>Ensure API credentials are set in <code>tee-snatcher/.env</code> or inherited from the monorepo configuration.</li> <li>Customize booking preferences by creating a <code>user-config.json</code> file in the <code>tee-snatcher</code> directory:</li> </ol> <pre><code>cd tee-snatcher\ncp user-config-template.json user-config.json\n</code></pre> <p>Edit <code>user-config.json</code> to specify course IDs, dates, player information, and payment details.</p>"},{"location":"#usage_1","title":"Usage","text":"<p>Start monitoring and automatic booking from the root of the monorepo:</p> <pre><code>pnpm start:tee-snatcher\n</code></pre> <p>Start monitoring in dry-run mode (simulates booking without making API calls) from the root:</p> <pre><code>pnpm start:tee-snatcher:dry-run\n</code></pre> <p>Alternatively, from the <code>tee-snatcher</code> directory:</p> <pre><code>cd tee-snatcher\nnode src/index.js start\n# For dry-run mode\nnode src/index.js start --dry-run\n</code></pre> <p>Stop monitoring from the root of the monorepo:</p> <pre><code>pnpm stop:tee-snatcher\n</code></pre> <p>Alternatively, from the <code>tee-snatcher</code> directory:</p> <pre><code>node src/index.js stop\n</code></pre> <p>For complete setup and usage instructions, see the tee-snatcher README.</p>"},{"location":"#monorepo-structure","title":"Monorepo Structure","text":"<pre><code>chrono-golf-js/\n\u251c\u2500\u2500 chrono-golf-api/          # API client package\n\u2502   \u251c\u2500\u2500 src/                  # Source code for API interactions\n\u2502   \u2514\u2500\u2500 README.md             # API client documentation\n\u251c\u2500\u2500 tee-snatcher/             # Tournament booking automation tool\n\u2502   \u251c\u2500\u2500 src/                  # Source code for monitoring and booking\n\u2502   \u251c\u2500\u2500 user-config-template.json  # Template for user configuration\n\u2502   \u2514\u2500\u2500 README.md             # Tee Snatcher documentation\n\u251c\u2500\u2500 pnpm-workspace.yaml       # Monorepo workspace configuration\n\u2514\u2500\u2500 README.md                 # This file\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit issues or pull requests for improvements to either package. Ensure you follow the coding standards and include tests where applicable.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the ISC License - see the LICENSE file for details.</p>"},{"location":"chrono-golf-api/","title":"Chrono Golf API","text":"<p>A Node.js client for the Lightspeed Golf Partner V2 API (also known as Chrono Golf API). This package is part of the chrono-golf-js monorepo.</p>"},{"location":"chrono-golf-api/#purpose","title":"Purpose","text":"<p>This library provides a convenient way to interact with the Chrono Golf API, allowing developers to manage golf courses, tee times, bookings, and player information programmatically.</p>"},{"location":"chrono-golf-api/#setup","title":"Setup","text":"<p>Ensure you have your API credentials set up in <code>chrono-golf-api/.env</code> or in the parent monorepo's configuration:</p> <pre><code>LIGHTSPEED_API_URL=https://api.chronogolf.com/v2\nLIGHTSPEED_CLIENT_ID=your_client_id\nLIGHTSPEED_CLIENT_SECRET=your_client_secret\n</code></pre>"},{"location":"chrono-golf-api/#usage","title":"Usage","text":"<p>Below are examples of common operations with the Chrono Golf API client:</p>"},{"location":"chrono-golf-api/#authentication","title":"Authentication","text":"<pre><code>const chronoGolf = require('chrono-golf-api');\n\nasync function authenticate() {\n  try {\n    const accessToken = await chronoGolf.getAccessToken();\n    console.log('Access token obtained:', accessToken);\n    return accessToken;\n  } catch (error) {\n    console.error('Authentication failed:', error.message);\n  }\n}\n\nauthenticate();\n</code></pre>"},{"location":"chrono-golf-api/#getting-courses","title":"Getting Courses","text":"<pre><code>const chronoGolf = require('chrono-golf-api');\n\nasync function getCourses() {\n  try {\n    const coursesResponse = await chronoGolf.getCourses({ page: 1, per_page: 10 });\n    console.log('Courses:', coursesResponse.courses);\n  } catch (error) {\n    console.error('Error fetching courses:', error.message);\n  }\n}\n\ngetCourses();\n</code></pre>"},{"location":"chrono-golf-api/#getting-tee-times","title":"Getting Tee Times","text":"<pre><code>const chronoGolf = require('chrono-golf-api');\n\nasync function getTeeTimes(courseId, date) {\n  try {\n    const params = {\n      date: date, // Format: YYYY-MM-DD\n      players: 4,\n      time_min: '08:00',\n      time_max: '18:00',\n      per_page: 50\n    };\n    const response = await chronoGolf.getTeeTimes(courseId, params);\n    console.log('Tee times for course', courseId, 'on', date, ':', response.teeTimes);\n  } catch (error) {\n    console.error('Error fetching tee times:', error.message);\n  }\n}\n\ngetTeeTimes('course-id-here', '2025-06-20');\n</code></pre>"},{"location":"chrono-golf-api/#booking-a-tee-time","title":"Booking a Tee Time","text":"<pre><code>const chronoGolf = require('chrono-golf-api');\n\nasync function bookTeeTime(courseId, teeTimeId) {\n  try {\n    const bookingData = {\n      players: 4,\n      player_info: [\n        { first_name: 'John', last_name: 'Doe', email: 'john@example.com' },\n        { first_name: 'Jane', last_name: 'Smith', email: 'jane@example.com' },\n        { first_name: 'Bob', last_name: 'Johnson', email: 'bob@example.com' },\n        { first_name: 'Alice', last_name: 'Brown', email: 'alice@example.com' }\n      ],\n      payment_token: 'your_payment_token_here'\n    };\n    const booking = await chronoGolf.bookTeeTime(courseId, teeTimeId, bookingData);\n    console.log('Booking successful:', booking);\n  } catch (error) {\n    console.error('Error booking tee time:', error.message);\n  }\n}\n\nbookTeeTime('course-id-here', 'tee-time-id-here');\n</code></pre>"},{"location":"chrono-golf-api/#license","title":"License","text":"<p>This project is licensed under the ISC License - see the LICENSE file for details.</p>"},{"location":"tee-snatcher/","title":"Tee Snatcher","text":"<p>A Node.js tool to automatically monitor and book tee times for golf tournaments using the Chrono Golf API (Lightspeed Golf Partner V2 API). This tool is part of the chrono-golf-js monorepo.</p>"},{"location":"tee-snatcher/#purpose","title":"Purpose","text":"<p>Tee Snatcher helps golf enthusiasts and tournament organizers by continuously monitoring specified golf courses for available tee times on desired dates. When a suitable tee time is found, it automatically books the slot for the configured number of players.</p>"},{"location":"tee-snatcher/#setup","title":"Setup","text":"<ol> <li> <p>Ensure you have your API credentials set up in <code>tee-snatcher/.env</code> or in the parent monorepo's configuration.</p> </li> <li> <p>Customize your tournament booking preferences by creating a <code>user-config.json</code> file in the <code>tee-snatcher</code> directory. Use the provided <code>user-config-template.json</code> as a starting point:</p> </li> </ol> <pre><code>cp user-config-template.json user-config.json\n</code></pre> <p>Then edit <code>user-config.json</code> with your specific course IDs, dates, player information, and payment token.</p>"},{"location":"tee-snatcher/#usage","title":"Usage","text":""},{"location":"tee-snatcher/#starting-the-monitoring-process","title":"Starting the Monitoring Process","text":"<p>To start monitoring for tee times and automatically book when available:</p> <pre><code>node src/index.js start\n</code></pre> <p>To start monitoring in dry-run mode (simulates booking without making API calls):</p> <pre><code>node src/index.js start --dry-run\n</code></pre> <p>From the root of the monorepo, you can use:</p> <pre><code>pnpm start:tee-snatcher\n# For dry-run mode\npnpm start:tee-snatcher:dry-run\n</code></pre>"},{"location":"tee-snatcher/#stopping-the-monitoring-process","title":"Stopping the Monitoring Process","text":"<p>To stop the monitoring process:</p> <pre><code>node src/index.js stop\n</code></pre> <p>From the root of the monorepo:</p> <pre><code>pnpm stop:tee-snatcher\n</code></pre>"},{"location":"tee-snatcher/#configuration","title":"Configuration","text":"<p>The configuration file <code>user-config.json</code> allows you to specify: - Courses to monitor (by course ID) - Dates to check for availability - Preferred time range for tee times - Number of players and their information for booking - Payment token for completing bookings - Monitoring interval and maximum attempts</p>"},{"location":"tee-snatcher/#how-it-works","title":"How It Works","text":"<ol> <li>Initialization: Tee Snatcher authenticates with the Chrono Golf API using the <code>chrono-golf-api</code> package.</li> <li>Monitoring: It periodically checks configured courses for available tee times on specified dates within the desired time range.</li> <li>Booking: When a suitable tee time is found (with enough spots for the configured number of players), it attempts to book the slot using the provided player information and payment token.</li> <li>Completion: If booking is successful, monitoring stops. If unsuccessful, it continues until the maximum number of attempts is reached.</li> </ol>"},{"location":"tee-snatcher/#notes","title":"Notes","text":"<ul> <li>Ensure your API credentials and payment token are valid and have the necessary permissions to book tee times.</li> <li>The tool will stop monitoring after reaching the maximum attempts configured or after a successful booking.</li> <li>You can interrupt the process at any time with <code>Ctrl+C</code>, which will gracefully stop monitoring.</li> </ul>"},{"location":"tee-snatcher/#license","title":"License","text":"<p>This project is licensed under the ISC License - see the LICENSE file for details.</p>"}]}